Static types and JavaScript

Why?
* Easier maintenance of large codebases
describe what arguments a function should take and what it should return,
    check if those constraints will be violated prior to runtime
type annotations
    can make code more readable
    can make code easier to analyse
    can allow for reliable refactoring
    can allow for generally better IDE support
    can catch some (type related) errors early
documentation
no tests needed


TypeScript
* headline: "JavaScript that scales."
* "a typed superset of JavaScript that compiles to plain JavaScript."
* ease of use and tool support over soundness
* By Microsoft (Anders Hejlsberg)
* Based on ES6+
* compiles to ES3+
Adds optional type annotations, visibility, and decorators
Compiler checks and removes annotations
supporting people from Java and C# land

Flow
* headline: "A static type checker for JavaScript"
* by Facebook
soundness, no runtime exceptions as goal
Not a compiler, but checker
If present, type annotations can very easily be removed by babel for runtime
proving types for idiomatic JavaScript

Common features
* gradual typing
* type inference
* compatiblility with JS
* realtime feedback
* Semantically and syntactically, Flow and Typescript are very, very similar.
* analyse the control flow of your program
    if, for

Differences
When it comes to declaring complex types and data structures, both the syntax and semantics used by Flow differ from TypeScript.
Probably the most significant difference is that Flow uses nominal typing, whereas TypeScript uses structural typing. Put simply, this means TypeScript considers two types to be equivalent if they have the same structure, ie, the same variables and methods. In contrast, Flow will only consider them to be the same if they actually have the same name

TypeScript concepts
declaration files, which commonly have the suffix .d.ts.
    A declaration file uses TypeScript to define the interface to a library.

For example, if you wanted to add Sinon to your project, you’d first add the actual NPM module:

    npm install --save sinon

Then you’d install the type definition:

    npm install --save @types/sinon

thousands of declaration files available, covering a multitude of JavaScript libraries

TypeScript pros
TypeScript support is baked into Visual Studio Code (VSCode)

VSCode
    basic typechecking and IDE features by analyzing JSDoc type annotations

Flow concepts
with Flow there is no real ‘compilation’ step.
Instead, Flow analyses your regular .js files to look for potential errors.
It’s kind of like a linter – a really, really smart linter
Flow has its own library definition mechanism that is vaguely similar to TypeScript’s, but not as well established.
By default Flow will not try and check against a third-party module unless you have provided a definition file.
coverage. In short, this is the proportion of your code that is actually being covered by Flow’s type checks. It’s something that the Flow command-line tool can report to you, but in Nuclide the editor itself is able to show which lines are being covered, and which aren’t.
Putting Type Annotations in Comments

    // @flow
    function bar(x) /* : string */ {
      return x.length;
    }
    bar('Hello, world!');

Nullability
[presentation]
One of my main sources of runtime exceptions when programming Java

Generic Type information
Types can be parameterized by others
Most common with collection types
    Array<Cat>
    Array<Animal>
TypeScript
    always covariant (more special):
    parametric types are compatible if the type to assign from has a more special type parameter
    seems most intuitive, allows for obviously wrong code, though
Flow
    using generic types you can choose from invariant (exact match), covariant + (more special), and contravariant - (more common)
    Array in Flow has an invariant parametric type
    more expressive, harder to master, disallows some correct code

Mutation, const
    TypeScript and flow: same as JavaScript (const optional, immutable via lib)
    TypeScript: readonly for properties

`any` type
can be anything, not specified
can selectively disable type checking
flow / TypeScript 2: explicit any supported, but any never inferred

Union Types
aka Disjoint Unions aka Tagged Unions aka Algebraic data types
to describe data with weird shapes
depending on some data other data might apply or not
    type Response = Result | Failure;
    type Result = { status: 'done', payload: Object }; // all good, we have the data
    type Failure = { status: 'error', code: number}; // error, we get the error code

Are Flow and TypeScript like Java/C++/C#?
Not really
    Both
        optionally typed / any
        built to match common JavaScript programming patterns
        type systems more expressive
        type inference
        control flow based type analysis
    TypeScript
        semantically compatible with JavaScript
    Flow
        just a checker
        not even a language of its own
        non-nullability as default

Structural vs Nominal Typing
Nominal Typing: types are compatible when their declared types match
Structural Typing: types are compatible when their structures match
Java, C#, C++, C all use nominal typing exclusively
Flow classes are also treated as nominal types
TypeScript classes are treated as structural types
Everything else in both Flow and TypeScript uses structural typing

Classes in TypeScript
TypeScript has special support for classes
Similar features can be found in Java/C++/C#
    abstract classes and methods
    special shortcut constructors (combined definition of fields and initialization)
    public, private, protected
    decorators (aka Attributes in C# and Annotations in Java)
    readonly properties (TypeScript 2) like in C#
Flow does not feature those or any other syntactic sugar, as it is a checker only

Integration with raw JavaScript
3rd Party Libraries in Flow
    Core Declarations come with Flow Checker, includes React
    Other external declarations are optional
    External Flow Type Definitions
    some libraries even come with added flow type declarations (e.g. immutable.js)
    Declarations can be added to flow config files
    If there are no existing declaration files: still works, but less powerful
TypeScript Declaration files
    Much larger base for external declarations DefinitelyTyped
    TypeScript 2.x
        like Flow
        install external type declarations transparently using npm (e.g.npm install @types/react --save)

IDE Support
Visual Studio Code
    https://code.visualstudio.com/
    Excellent TypeScript support
    Directly uses Language Service of TypeScript Compiler
    Written in TypeScript
Atom / Nuclide
    https://atom.io/
    https://nuclide.io/ (Atom Package)
    Probably best Flow support
IntelliJ IDEA / Webstorm
    Starting from 2016.3
    Flow: integrated checking and display of messages
    Even better TypeScript support: uses Language Service of TypeScript Compiler


Atom / Nuclide

    https://atom.io/
    https://nuclide.io/ (Atom Package)
    Probably best Flow support

IntelliJ IDEA / Webstorm

Starting from 2016.3

    Flow: integrated checking and display of messages
    Even better TypeScript support: uses Language Service of TypeScript Compiler
    Basic Elm support via Plugin

Barrier to entry for JavaScript people

    Flow: low
        fits seamlessly in standard JavaScript build chain
        can be enabled file by file
        weak mode only shows clear errors in order not to overwhelm people
    TypeScript: medium
        different build chain (tsc compiler)
        can include plain JavaScript, but entry point must be TypeScript
    Elm: high
        different syntax, semantics, and tool chain

Should you use a type checker?

    don't be fooled: checkers do not make your programs error free
    there seems to be little or no impact on productivity
    initial effort to introduce a checker is low, though
    but a type system is a complex thing, it comes at a cost

My biased recommendation

    your project does not live for long: no
    your project is really simple: no
    there is a chance you will need to refactor the thing: yes
    your system is very important or even crucial for the success of your company: yes
    people enter or leave your team frequently: yes
    you have substantial amount of algorithmic code: yes

Where do they excel?

    TypeScript: supporting people from Java and C# land
        more complete IDE support
        language server
        large set of 3rd party declaration files
    Flow: providing typings for idiomatic JavaScript
        easy to get started even with existing project
        more powerful and flexible generics
        nominal typing for classes
    Elm: functional language deliberately different from JavaScript
        simplicity of type system (no JavaScript legacy)
        always completely typed (no any)
        everything immutable and constant always and everywhere
        complete package (also great orientation for beginners)

Barrier to entry for JavaScript people
    Flow:
        low
        fits seamlessly in standard JavaScript build chain
        can be enabled file by file
        weak mode only shows clear errors in order not to overwhelm people
    TypeScript:
        medium
        different build chain (tsc compiler)
        can include plain JavaScript, but entry point must be TypeScript

Should you use a type checker?
    don't be fooled: checkers do not make your programs error free
    there seems to be little or no impact on productivity [ http://danluu.com/empirical-pl/ ]
    initial effort to introduce a checker is low, though
    but a type system is a complex thing, it comes at a cost
My biased recommendation
    your project does not live for long: no
    your project is really simple: no
    there is a chance you will need to refactor the thing: yes
    your system is very important or even crucial for the success of your company: yes
    people enter or leave your team frequently: yes
    you have substantial amount of algorithmic code: yes

Where do they excel?
    TypeScript: supporting people from Java and C# land
        more complete IDE support
        language server
        large set of 3rd party declaration files
    Flow: providing typings for idiomatic JavaScript
        easy to get started even with existing project
        more powerful and flexible generics
        nominal typing for classes

General observations / Trivia
    If it is Angular it will be TypeScript
    If people come from a JavaScript background and use React, they are more likely to choose flow
    TypeScript has better tooling support
    TypeScript 2.x has caught up with so many features previously only available in flow, so people are likely to choose TypeScript 2.x when they can start from scratch



Flow support
There is nascent Flow support being built for a number of different IDEs. The most mature is probably Nuclide, a purpose-built extension to Atom being created by Facebook
    provides basic inline error support for Flow, which alone probably makes it worth looking at. It also has autocomplete support, although in the limited time I worked with it I never got particularly good suggestions.

Gradual switch from JS to TypeScript
* .js -> .ts
* --noImplicitAny
    will require you to specify types for all the arguments and return value of every function that you use

Gradual switch from JS to Flow
To have Flow analyse a particular module, you have to opt-in by adding the following to the top of the module’s file:

    // @flow

add type annotations to your code

From Flow to TypeScript
    Rename the file to .ts
    Remove the // @flow header
    Make slight syntax adjustments (imports, interfaces)
    Fix the type errors that Flow never managed to discover

Using webpack and ES6 features (through Babel-Loader) and ES6 modules (through Webpack2). The change in setup:
    Add .ts and .tsx extensions to webpacks resolver configuration, before .js and .jsx
    Add the awesome-typescript-loader
    Create a tsconfig.json with --strictNullChecks and --noImplicitAny enabled. If you set your target for typescript to es5, set the lib flag to ["dom", "es5", "es2015", "es2016", "es2017"] to prevent complaints about missing definitions for stuff like Promise


Flow can catch common bugs in JavaScript programs before they run, including:
    silent type conversions,
    null dereferences,
    and the dreaded undefined is not a function.

IDE features
Jumping to definitions,
autocompletion,
JSDoc tooltips,
refactoring commands,
inline rendering of type errors

Suggested combinations
Flow + React
TypeScript + Angular 2+

vs
* former Flow user, now pro-TypeScript (2017-02-15) [pro-typescript-flow-vs-typescript]
    * Unhelpful error messages
        * "Incompatible instantiation for T, T"
            * what? where?
    * "I don’t have the feeling that the React and Flow teams talk much to one another."
    * "Microsoft on the other hand has given Typescript a ton of attention."
    * "Facebook isn’t as invested in Flow as it should be."
    * Bad Tooling
    * "Typescript on the other hand is its own language, with its own spec. It happens to translate straight to Javascript, but the presence of a spec makes it feel much more stable. Typescript doesn’t have to accomodate untyped Code (although it lets you do so), and can operate in a much stricter, well-defined environment."
    * "The biggest advantage when working with Typescript [...] is Visual Studio Code"
    * "lack of reliability"
* [pro-flow]
     in comparison to TypeScript, Flow feels more like something that can be bolted onto the side of a project, even whilst the project is in mid-flight. The default tooling configuration seems geared towards incremental introduction. The downside of this is that sometimes you might have a false sense of security about exactly how much safety Flow is giving you at a particular point in time. You mightn’t have added @flow annotations to a particular file, or have given it enough information to comprehensively analyse your code.
     * better integrated with React and Facebook's toolchain (no backing up)
     TypeScript feels more mature but also more committing, whereas Flow seems easier to introduce incrementally, albeit with the caveat that it might be checking less of your code than you realise.
     I think that the technical superiority of one or the other is less important than its compatibility with the toolchain that surrounds it.

"There are some issues that are too tricky for Typescript to solve. To circumvent these, the way to go seems to be to cast some expression to any and then to the type you know it has. You need to be explicit here but you can be sure that whatever problem exists, doesn’t propagate"

future
* existential operator (?.)



[pro-typescript-flow-vs-typescript] http://jan.varwig.org/2017/02/15/flow-vs-typescript.html
[pro-flow] https://shinesolutions.com/2017/01/05/typescript-flow-and-the-importance-of-toolchains-over-tools/
[flow-typed] https://flowtype.org/docs/third-party.html#_
[ts-playground] https://www.typescriptlang.org/play/index.html
[flow-vs-typescript-presentation] http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html#/2
[try-flow] https://flowtype.org/try/
    show raytracer
